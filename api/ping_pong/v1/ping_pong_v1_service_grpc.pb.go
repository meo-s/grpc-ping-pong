// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/ping_pong/v1/ping_pong_v1_service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PingPongRpcClient is the client API for PingPongRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingPongRpcClient interface {
	Call(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
}

type pingPongRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPingPongRpcClient(cc grpc.ClientConnInterface) PingPongRpcClient {
	return &pingPongRpcClient{cc}
}

func (c *pingPongRpcClient) Call(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/ping_pong.v1.PingPongRpc/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingPongRpcServer is the server API for PingPongRpc service.
// All implementations must embed UnimplementedPingPongRpcServer
// for forward compatibility
type PingPongRpcServer interface {
	Call(context.Context, *empty.Empty) (*wrappers.StringValue, error)
	mustEmbedUnimplementedPingPongRpcServer()
}

// UnimplementedPingPongRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPingPongRpcServer struct {
}

func (UnimplementedPingPongRpcServer) Call(context.Context, *empty.Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedPingPongRpcServer) mustEmbedUnimplementedPingPongRpcServer() {}

// UnsafePingPongRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingPongRpcServer will
// result in compilation errors.
type UnsafePingPongRpcServer interface {
	mustEmbedUnimplementedPingPongRpcServer()
}

func RegisterPingPongRpcServer(s grpc.ServiceRegistrar, srv PingPongRpcServer) {
	s.RegisterService(&PingPongRpc_ServiceDesc, srv)
}

func _PingPongRpc_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongRpcServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ping_pong.v1.PingPongRpc/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongRpcServer).Call(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PingPongRpc_ServiceDesc is the grpc.ServiceDesc for PingPongRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingPongRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ping_pong.v1.PingPongRpc",
	HandlerType: (*PingPongRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _PingPongRpc_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ping_pong/v1/ping_pong_v1_service.proto",
}
